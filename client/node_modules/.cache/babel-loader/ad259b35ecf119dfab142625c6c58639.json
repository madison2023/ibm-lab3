{"ast":null,"code":"var _jsxFileName = \"/Users/rachelmadison/lab-3-fixed-team-37/client/src/components/QuizForm/QuizForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport useFetch from 'use-http';\nimport { Controller, useForm } from 'react-hook-form';\nimport { Button, Card, CircularProgress, FormControl, FormControlLabel, FormHelperText, FormLabel, Radio, RadioGroup, Typography } from '@material-ui/core';\nimport ResultModal from '../ResultModal/ResultModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuizForm = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data = []\n  } = useFetch('/api/questions/', {}, []);\n  const {\n    handleSubmit,\n    formState: {\n      errors\n    },\n    control\n  } = useForm();\n  const [result, setResult] = useState({});\n  const [showResult, setShowResult] = useState(false);\n\n  const onSubmit = formData => {\n    fetch('/api/questions/result', {\n      body: JSON.stringify(formData),\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw new Error('error with posting results');\n    }).then(quizResult => {\n      setResult(quizResult);\n      setShowResult(true);\n    }).catch(e => {\n      console.error('Error sending result', e);\n    });\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {\n      \"aria-busy\": true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Error fetching data from the server\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      maxWidth: 600,\n      margin: '4rem auto',\n      maxHeight: '80vh',\n      overflow: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [data.map(question => /*#__PURE__*/_jsxDEV(FormControl, {\n        style: {\n          margin: 20,\n          display: 'flex'\n        },\n        component: \"fieldset\",\n        error: !!errors[question.id],\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          children: question.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          children: errors[question.id] && 'Please select an option'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          rules: {\n            required: true\n          },\n          control: control,\n          name: question.id,\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(RadioGroup, { ...field,\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: option,\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 32\n              }, this),\n              label: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        style: {\n          width: '100%'\n        },\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultModal, {\n      show: showResult,\n      result: result,\n      onClose: () => setShowResult(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuizForm, \"yFmrkj5GXhMFT3yEEvSJt6s/1/4=\", false, function () {\n  return [useFetch, useForm];\n});\n\n_c = QuizForm;\nexport default QuizForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizForm\");","map":{"version":3,"sources":["/Users/rachelmadison/lab-3-fixed-team-37/client/src/components/QuizForm/QuizForm.js"],"names":["React","useState","useFetch","Controller","useForm","Button","Card","CircularProgress","FormControl","FormControlLabel","FormHelperText","FormLabel","Radio","RadioGroup","Typography","ResultModal","QuizForm","loading","error","data","handleSubmit","formState","errors","control","result","setResult","showResult","setShowResult","onSubmit","formData","fetch","body","JSON","stringify","method","headers","then","res","ok","json","Error","quizResult","catch","e","console","maxWidth","margin","maxHeight","overflow","map","question","display","id","required","field","options","option","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport useFetch from 'use-http';\nimport { Controller, useForm } from 'react-hook-form';\nimport {\n  Button,\n  Card,\n  CircularProgress,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@material-ui/core';\nimport ResultModal from '../ResultModal/ResultModal';\n\nconst QuizForm = () => {\n  const { loading, error, data = [] } = useFetch('/api/questions/', {}, []);\n  const {\n    handleSubmit,\n    formState: { errors },\n    control,\n  } = useForm();\n  const [result, setResult] = useState({});\n  const [showResult, setShowResult] = useState(false);\n\n  const onSubmit = (formData) => {\n    fetch('/api/questions/result', {\n      body: JSON.stringify(formData),\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        throw new Error('error with posting results');\n      })\n      .then((quizResult) => {\n        setResult(quizResult);\n        setShowResult(true);\n      })\n      .catch((e) => {\n        console.error('Error sending result', e);\n      });\n  };\n\n  if (loading) {\n    return <CircularProgress aria-busy />;\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <Typography>Error fetching data from the server</Typography>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      style={{\n        maxWidth: 600,\n        margin: '4rem auto',\n        maxHeight: '80vh',\n        overflow: 'auto',\n      }}\n    >\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {data.map((question) => (\n          <FormControl\n            style={{\n              margin: 20,\n              display: 'flex',\n            }}\n            key={question.id}\n            component=\"fieldset\"\n            error={!!errors[question.id]}\n          >\n            <FormLabel component=\"legend\">{question.question}</FormLabel>\n            <FormHelperText>\n              {errors[question.id] && 'Please select an option'}\n            </FormHelperText>\n            <Controller\n              rules={{ required: true }}\n              control={control}\n              name={question.id}\n              render={({ field }) => (\n                <RadioGroup {...field}>\n                  {question.options.map((option) => (\n                    <FormControlLabel\n                      key={option}\n                      value={option}\n                      control={<Radio />}\n                      label={option}\n                    />\n                  ))}\n                </RadioGroup>\n              )}\n            />\n          </FormControl>\n        ))}\n        <Button color=\"primary\" style={{ width: '100%' }} type=\"submit\">\n          Submit\n        </Button>\n      </form>\n\n      <ResultModal\n        show={showResult}\n        result={result}\n        onClose={() => setShowResult(false)}\n      />\n    </Card>\n  );\n};\n\nexport default QuizForm;\n"]},"metadata":{},"sourceType":"module"}